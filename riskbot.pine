//@version=5
//@author=Ricardo Montserrat
strategy('Rich Bot', shorttitle='RkBot', precision=2, overlay=true, initial_capital=1000, commission_type=strategy.commission.percent, commission_value=0.1, currency='USD', calc_on_every_tick=true)

// INSTRUCTIONS:
// 0. Hide variables not being used
// 1. Check if 1 min if above/below midline counts as box
// 2. Check if broke barrier of first 2 hours of day
// 3. If it broke add the supertrend to the conditioning

print(string name, string value) => 
	var table t = table.new(position.middle_right, 1, 1)
	table.cell(t, 0, 0, name + ': ' + value, bgcolor = color.white)

visuals = 'Visuals'

// --- UT BOT ---

UTBOT_TAG = 'UT Bot'

KEY_VALUE = input(2, title='Key Vaule. \'This changes the sensitivity\'', group=UTBOT_TAG)
ATR_PERIOD = input(1, title='ATR Period', group=UTBOT_TAG)

SHOW_BARCOLOR = input(false, title='Show Bar Color', group=visuals)
SHOW_UTSIGNAL = input(false, title='Show UT Signal', group=visuals)

// Average true range (ATR), high == high volatility, low == low volatility
// Uses Moving Average of price to calculate volatility
LOSS_TOLERATE_AMOUNT = KEY_VALUE * ta.atr(ATR_PERIOD)

// TODO: dynamic 3, which is the number of timeframes
trailingStopATRs = array.new_float(size = 2, initial_value = .0) 
utbot(timeframe, idx) =>
    [tfClose] = request.security(syminfo.tickerid, timeframe, [close])

    trailingStopATR = array.get(trailingStopATRs, idx) 
    lastTrail = nz(trailingStopATR[1], .0)

    closeHigh = close > lastTrail
    lastCloseHigh = close[1] > lastTrail

    higherClose = closeHigh ? close - LOSS_TOLERATE_AMOUNT : close + LOSS_TOLERATE_AMOUNT
    lowerClose = not (closeHigh or lastCloseHigh) ? math.min(lastTrail, close + LOSS_TOLERATE_AMOUNT) : higherClose
    trailingStopATR := closeHigh and lastCloseHigh ? math.max(lastTrail, close - LOSS_TOLERATE_AMOUNT) : lowerClose

    ema = ta.ema(close, 1)
    above = ta.crossover(ema, trailingStopATR)
    below = ta.crossover(trailingStopATR, ema)

    closeUptrend = close > trailingStopATR

    [closeUptrend ? color.green : color.red, closeUptrend and above, not closeUptrend and below]

[utbotColor3, utbotBuy3, utbotSell3] = utbot('3', 0)
[_, utbotBuy5, utbotSell5] = utbot('5', 1)

plotshape(SHOW_UTSIGNAL and utbotBuy3, title='Buy', text='Buy', style=shape.labelup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.white, size=size.tiny)
plotshape(SHOW_UTSIGNAL and utbotSell3, title='Sell', text='Sell', style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.white, size=size.tiny)

barcolor(SHOW_BARCOLOR ? utbotColor3 : na)

// --- Box Bot ---

BOXBOT_TAG = 'Box Bot'

var color TRANSPARENT = color.new(color.white, 100)

FAST_PERIOD_K = input.int(title='Fast Period', minval=1, defval=24, group=BOXBOT_TAG)
SLOW_PERIOD_D = input.int(title='Slow Period', minval=1, defval=3, group=BOXBOT_TAG)
SMOOTH_FAST_PERIOD = input.int(title='Smooth', minval=1, defval=5, group=BOXBOT_TAG)

OVERBOUGHT_LEVEL = input(title='Overbought Level', defval=70, group=BOXBOT_TAG)
OVERSOLD_LEVEL = input(title='Oversold Level', defval=30, group=BOXBOT_TAG)

SHOW_STOCHASTIC = input(false, title='Show Stochastic', group=visuals)

boxbot(timeframe) =>
    [tfClose, tfHigh, tfLow] = request.security(syminfo.tickerid, timeframe, [close, high, low])

    fastPeriod = ta.sma(ta.stoch(tfClose, tfHigh, tfLow, FAST_PERIOD_K), SMOOTH_FAST_PERIOD)
    slowPeriod = ta.sma(fastPeriod, SLOW_PERIOD_D)

    [fastPeriod, slowPeriod, fastPeriod > OVERBOUGHT_LEVEL, fastPeriod < OVERSOLD_LEVEL]

[fastPeriod3, slowPeriod3, overbought3, oversold3] = boxbot('3')
[_,_, overbought5, oversold5] = boxbot('5')

getvalueSTOCHASTIC(value) => SHOW_STOCHASTIC ? value : na

trendColor = fastPeriod3 > slowPeriod3 ? color.green : color.red
plot(getvalueSTOCHASTIC(fastPeriod3), title='%Fast', color=trendColor)
plot(getvalueSTOCHASTIC(slowPeriod3), title='%Slow', color=trendColor)

overboughtColor = overbought3 ? color.red : na
oversoldColor = oversold3 ? color.green : na

hline(getvalueSTOCHASTIC(50), title='Middle Band', color=color.new(color.white, 50))
fill(hline(getvalueSTOCHASTIC(100), color=TRANSPARENT), hline(getvalueSTOCHASTIC(OVERBOUGHT_LEVEL), color=color.red), title='Upper Band Breakout', color=color.new(overboughtColor, 50))
fill(hline(getvalueSTOCHASTIC(0), color=TRANSPARENT), hline(getvalueSTOCHASTIC(OVERSOLD_LEVEL), color=color.green), title='Lower Band Breakout', color=color.new(oversoldColor, 50))

plotshape(SHOW_STOCHASTIC and ta.crossover(fastPeriod3, slowPeriod3) ? fastPeriod3 : na, title='Fast/Slow Crossover', location=location.absolute, style=shape.circle, size=size.tiny, color=color.green)
plotshape(SHOW_STOCHASTIC and ta.crossunder(fastPeriod3, slowPeriod3) ? slowPeriod3 : na, title='Fast/Slow Crossunder', location=location.absolute, style=shape.circle, size=size.tiny, color=color.red)

// --- SMI Bot ---

SMIBOT_TAG = 'SMI Bot'

LOOKBACK_PERIOD = input.int(title='Stochastic Lookback', defval=13, minval=1, group=SMIBOT_TAG)
SMOOTH_LEN1 = input.int(title='1st Smoothing Length', defval=25, minval=1, group=SMIBOT_TAG)
SMOOTH_LEN2 = input.int(title='2nd Smoothing Length', defval=2, minval=1, group=SMIBOT_TAG)
SIGNAL_LENGTH = input.int(title='Signal Length', defval=12, minval=1, group=SMIBOT_TAG)

SHOW_SMI = input(false, title='Show SMI', group=visuals)

smibot(timeframe) =>
    [tfClose] = request.security(syminfo.tickerid, timeframe, [close])

    highestHigh = ta.highest(LOOKBACK_PERIOD)
    lowestLow = ta.lowest(LOOKBACK_PERIOD)

    numerator = ta.ema(ta.ema(tfClose - 0.5 * (highestHigh + lowestLow), SMOOTH_LEN1), SMOOTH_LEN2)
    denominator = 0.5 * ta.ema(ta.ema(highestHigh - lowestLow, SMOOTH_LEN1), SMOOTH_LEN2)

    smi = 100 * numerator / denominator
    signal = ta.ema(smi, SIGNAL_LENGTH)

    [smi, signal, smi > signal]

[smi3, signal3, uptrend3] = smibot('3')

trendColor := uptrend3 ? color.yellow : color.blue

getvalueSMI(value) => SHOW_SMI ? value : na

plot(getvalueSMI(smi3), title='SMI', color=trendColor)
plot(getvalueSMI(signal3), title='Signal', color=trendColor)

plotshape(SHOW_SMI and ta.crossover(smi3, signal3) ? smi3 : na, title='Crossover', location=location.absolute, style=shape.circle, size=size.tiny, color=color.green)
plotshape(SHOW_SMI and ta.crossunder(smi3, signal3) ? smi3 : na, title='Crossunder', location=location.absolute, style=shape.circle, size=size.tiny, color=color.red)

// --- RT BOT ---

RTBOT_TAG = 'RT Bot'

BOX_3MIN_CLOSENESS = input.int(title='Box 3min is Close', minval=1, defval=3, group=RTBOT_TAG)
UTSIGNAL_3MIN_CLOSENESS = input.int(title='UT Signal 3min is Close', minval=1, defval=3, group=RTBOT_TAG)

BOX_BUY_5MIN_CLOSENESS = input.int(title='Box 5min is Close for buy', minval=1, defval=3, group=RTBOT_TAG)
BOX_SELL_5MIN_CLOSENESS = input.int(title='Box 5min is Close for sell', minval=1, defval=8, group=RTBOT_TAG)
UTSIGNAL_SELL_5MIN_CLOSENESS = input.int(title='UT Signal 5min is Close for sell', minval=1, defval=3, group=RTBOT_TAG)

CROSS_3MIN_CLOSENESS = input.int(title='Cross 3min is Close for buy', minval=1, defval=3, group=RTBOT_TAG)

CONFIDENCE_LEVEL = input.int(title='Confidence Level', minval=50, defval=80, group=RTBOT_TAG)
RISK_LEVEL = input.int(title='Risk Level', minval=50, defval=50, group=RTBOT_TAG)

isclose(condition, length) =>
    for i = 0 to length
        if condition[i]
            true

getvalue(cond) => cond ? 1 : 0

closeOverbought = isclose(overbought3, BOX_3MIN_CLOSENESS) and isclose(overbought5, BOX_BUY_5MIN_CLOSENESS)
closeOversold = isclose(oversold3, BOX_3MIN_CLOSENESS) and isclose(oversold5, BOX_BUY_5MIN_CLOSENESS)

closeUptrend = isclose(uptrend3, CROSS_3MIN_CLOSENESS)

utBuy3 = isclose(utbotBuy3, UTSIGNAL_3MIN_CLOSENESS)
utSell3 = isclose(utbotSell3, UTSIGNAL_3MIN_CLOSENESS)

call = utBuy3 and closeOversold and closeUptrend
put = utSell3 and closeOverbought and not closeUptrend

// --- Points Percentage Calculation ---

closePut = isclose(utbotBuy5, UTSIGNAL_SELL_5MIN_CLOSENESS) and isclose(oversold5, BOX_SELL_5MIN_CLOSENESS) or call
closeCall = isclose(utbotSell5, UTSIGNAL_SELL_5MIN_CLOSENESS) and isclose(overbought5, BOX_SELL_5MIN_CLOSENESS) or put

utBuy5 = isclose(utbotBuy5, UTSIGNAL_3MIN_CLOSENESS)
utSell5 = isclose(utbotSell5, UTSIGNAL_3MIN_CLOSENESS)

callpoints = getvalue(utBuy3) + getvalue(utBuy5) + getvalue(closeOversold) + getvalue(closeUptrend) + getvalue(closePut)
putpoints = getvalue(utSell3) + getvalue(utSell5) + getvalue(closeOverbought) + getvalue(not closeUptrend) + getvalue(closeCall)

var onput = false
var oncall = false

// TODO: Dynamic 5, which is the length of positive/negative points
points = (callpoints - putpoints) / 5 * 100

highCallPercent = points >= RISK_LEVEL
highPutPercent = points <= -RISK_LEVEL

if highCallPercent and onput
    strategy.close('Put')
    onput := false
else if highPutPercent and oncall
    strategy.close('Call')
    oncall := false

plotshape(highCallPercent, location=location.belowbar, style=shape.triangleup, size=size.normal, color=color.purple)
plotshape(highPutPercent, location=location.abovebar, style=shape.triangledown, size=size.normal, color=color.purple)

print(points > 0 ? 'Call' : 'Put', str.tostring(math.abs(points), '#.##') + '%')

// --- Strategy Calls ---

startcall = points >= CONFIDENCE_LEVEL and not oncall
startput = points <= -CONFIDENCE_LEVEL and not onput

if startcall
    strategy.entry('Call', strategy.long)
    oncall := true
else if startput
    strategy.entry('Put', strategy.short)
    onput := true

plotshape(startcall, location=location.belowbar, style=shape.triangleup, size=size.huge, color=color.green)
plotshape(startput, location=location.abovebar, style=shape.triangledown, size=size.huge, color=color.red)